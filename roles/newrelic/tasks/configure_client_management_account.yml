- name: Set Group Config Variables
  set_fact: 
    # This is the id associated with newrelicserviceaccount@bluesageusa.com
    service_account_user_id: 1006644413
    client_management_group_name: ClientAccountManagement

- name: Query New Relic Groups
  delegate_to: localhost
  shell: |
    QUERY_GROUP_RESPONSE=$(curl https://api.newrelic.com/graphql \
      -H 'Content-Type: application/json' \
      -H 'API-Key: {{api_key}}' \
      --data-binary '{
                      "query": "{actor {organization {userManagement {authenticationDomains(id: \"{{ authentication_domain_id }}\") {authenticationDomains {groups {groups {displayName id users {users {name id}}}}}}}}}}",
                      "variables": ""
                    }'
    )
    echo $QUERY_GROUP_RESPONSE
  register: query_new_relic_groups

- name: Set Query Group as Fact
  set_fact:
    query_group: "{{ query_new_relic_groups.stdout | from_json }}"

- name: Create client_management_group_name Group if does not exist
  delegate_to: localhost
  shell: |
    CLIENT_MANAGEMENT_GROUP=$(echo '{{ query_group | to_json }}' | jq '.data.actor.organization.userManagement.authenticationDomains.authenticationDomains.[0].groups.groups.[] | select(.displayName == "{{ client_management_group_name }}")')

    if [ -z "$CLIENT_MANAGEMENT_GROUP" ]; then
      # create group if does not exist
      CREATE_GROUP_RESPONSE=$(curl https://api.newrelic.com/graphql \
        -H 'Content-Type: application/json' \
        -H 'API-Key: {{api_key}}' \
        --data-binary '{
                        "query": "mutation {userManagementCreateGroup(createGroupOptions: {authenticationDomainId: \"{{ authentication_domain_id }}\" displayName: \"{{ client_management_group_name }}\" }) {group {displayName id}}}",
                        "variables": ""
                      }'
      )
      GROUP_ID=$(echo $CREATE_GROUP_RESPONSE | jq -r .data.userManagementCreateGroup.group.id)
      echo $GROUP_ID
    else
      GROUP_ID=$(echo $CLIENT_MANAGEMENT_GROUP | jq -r .id)
      echo $GROUP_ID
    fi
  register: client_management_group_id

- name: Set Client Management Group Id as Fact
  set_fact:
    group_id: "{{ client_management_group_id.stdout }}"

- name: Add Service Account User to group 
  delegate_to: localhost
  shell: |
    CLIENT_MANAGEMENT_GROUP=$(echo '{{ query_group | to_json }}' | jq '.data.actor.organization.userManagement.authenticationDomains.authenticationDomains.[0].groups.groups.[] | select(.displayName == "{{ client_management_group_name }}")')

    SERVICE_ACCOUNT_USER=$(echo $CLIENT_MANAGEMENT_GROUP | jq '.users.users.[] | select(.id == "{{ service_account_user_id }}")' )

    if [ -z "$SERVICE_ACCOUNT_USER" ]; then
      # Add service user to group
      ADD_USER_RESPONSE=$(curl https://api.newrelic.com/graphql \
        -H 'Content-Type: application/json' \
        -H 'API-Key: {{api_key}}' \
        --data-binary '{
                        "query": "mutation {userManagementAddUsersToGroups(addUsersToGroupsOptions: {groupIds: [\"{{group_id}}\"] userIds: [\"{{service_account_user_id}}\"]}) {groups {displayName id}}}",
                        "variables": ""
                      }'
      )

    fi
