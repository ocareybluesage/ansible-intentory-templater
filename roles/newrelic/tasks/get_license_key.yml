- name: Set Varialbes
  set_fact:
    all_product_admin_role_id: 1254 
    client: move

- name: Get New Relic Service Account Key
  delegate_to: localhost
  shell: |
    API_KEY=$(aws ssm get-parameter --name /secrets/new_relic/api_key --with-decryption --query "Parameter.Value" --output text)
    echo $API_KEY
  register: get_api_key_output

- name: Get Client Account Metadata
  delegate_to: localhost
  shell: |
    QUERY_ACCOUNT_RESPONSE=$(curl https://api.newrelic.com/graphql \
      -H 'Content-Type: application/json' \
      -H 'API-Key: {{ get_api_key_output.stdout }}' \
      --data-binary '{
                        "query": "{actor {organization {accountManagement {managedAccounts(isCanceled: false) {name id}}}}}",
                        "variables": ""
                    }'
    )

    CLIENT_ACCOUNT_METADATA=$(echo $QUERY_ACCOUNT_RESPONSE | jq '.data.actor.organization.accountManagement.managedAccounts.[] | select(.name == "{{client}}")')

    if [ -z "$CLIENT_ACCOUNT_METADATA" ]; then
      echo Account associated with client {{client}} was not found!
      exit 1
    fi

    ACCOUNT_ID=$(echo $CLIENT_ACCOUNT_METADATA | jq .id)
    echo $ACCOUNT_ID

  register: client_account_id

- name: Set Account Id as Fact
  set_fact:
    account_id: "{{ client_account_id.stdout }}"

- name: Get Account Management Group
  delegate_to: localhost
  shell: |
    QUERY_GROUP_RESPONSE=$(curl https://api.newrelic.com/graphql \
      -H 'Content-Type: application/json' \
      -H 'API-Key: {{ get_api_key_output.stdout }}' \
      --data-binary '{
                      "query": "{actor {organization {userManagement {authenticationDomains(id: \"{{ authentication_domain_id }}\") {authenticationDomains {groups {groups {displayName id users {users {name id}}}}}}}}}}",
                      "variables": ""
                    }'
    )
    ACCOUNT_MANAGEMENT_GROUP_ID=$(echo $QUERY_GROUP_RESPONSE | jq -r '.data.actor.organization.userManagement.authenticationDomains.authenticationDomains.[0].groups.groups.[] | select(.displayName == "{{ client_management_group_name }}") | .id')
    echo $ACCOUNT_MANAGEMENT_GROUP_ID
  register: client_management_group_id

- name: Set Group Id as Fact
  set_fact:
    group_id: "{{ client_management_group_id.stdout }}"


# add service account user to client account....


# - name: Get Client License Key
#   delegate_to: localhost
#   shell: |
#     LICENSE_KEY=$(aws ssm get-parameter --name /secrets/new_relic/java_agent/{{client}}/license_key --with-decryption --query "Parameter.Value" --output text)

#     if [ -z "$LICENSE_KEY" ]; then 
#       echo "$LICENSE_KEY"
#     else 
#       echo "$LICENSE_KEY"
#     fi
#   register: test_output


# - debug:
#     var: account_id


# - name: Foo
#   set_fact:
#     foo: "{{ query_new_relic_groups.stdout }}"

# - debug:
#     var: group_id