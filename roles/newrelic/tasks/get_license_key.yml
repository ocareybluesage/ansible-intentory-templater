# create var for authentication domain id

- name: Get New Relic Service Account Key
  delegate_to: localhost
  shell: |
    API_KEY=$(aws ssm get-parameter --name /secrets/new_relic/api_key --with-decryption --query "Parameter.Value" --output text)
    echo $API_KEY
  register: get_api_key_output

- name: Query New Relic Groups
  delegate_to: localhost
  shell: |
    GROUP_OUTPUT=$(curl https://api.newrelic.com/graphql \
      -H 'Content-Type: application/json' \
      -H 'API-Key: {{ get_api_key_output.stdout }}' \
      --data-binary '{
                        "query": "{actor {organization {userManagement {authenticationDomains(id: \"0f4dda55-888e-4f4d-abba-ac7b3417faba\") {authenticationDomains {groups {groups {displayName id } } } } } } }}",
                        "variables": ""
                    }'
    )
    echo $GROUP_OUTPUT
  register: query_new_relic_groups

- name: Set Group Output as Fact
  set_fact:
    group_output: "{{ query_new_relic_groups.stdout | from_json }}"

- name: Create ClientAccountManagement Group if does not exist
  delegate_to: localhost
  shell: |
    CHECK=$(echo '{{ group_output | to_json }}' | jq '.data.actor.organization.userManagement.authenticationDomains.authenticationDomains.[0].groups.groups' | grep ClientAccountManagement)

    if [ -z "$CHECK" ]; then
      echo ClientAccountManagement group not found.
      echo Creating ClientAccountManagement group...
      curl https://api.newrelic.com/graphql \
        -H 'Content-Type: application/json' \
        -H 'API-Key: {{ get_api_key_output.stdout }}' \
        --data-binary '{
                          "query": "mutation {userManagementCreateGroup(createGroupOptions: {authenticationDomainId: \"0f4dda55-888e-4f4d-abba-ac7b3417faba\" displayName: \"ClientAccountManagement\" }) {group {displayName id}}}",
                          "variables": ""
                      }'
    else 
      echo ClientAccountManagement group exists!
    fi

  register: foo

- name: Printout put
  delegate_to: localhost
  debug:
    msg: "output {{ foo.stdout }}"

# - name: Get Client License Key from SSM
#   delegate_to: localhost
#   shell: |
#     LICENSE_KEY=$(aws ssm get-parameter --name /secrets/new_relic/account_id --with-decryption --query "Parameter.Value" --output text)

#     if [ -n "$LICENSE_KEY" ]; then 
#       echo "$LICENSE_KEY"
#     else 
#       echo License Key not found in AWS SSM
#       echo Generating License Key for {{ client }}...
#     fi
#   register: test_output

# - name: Printout put
#   delegate_to: localhost
#   debug:
#     msg: "output {{ test_output.stdout }}"